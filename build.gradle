apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

def libraryVersion = '0.0.1'
def libraryGroupId = 'com.kameleoon'
def libraryArtifactId = 'kameleoon-openfeature-android'

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

android {
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33
        compileSdk 33
        versionCode 1
        versionName libraryVersion

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        buildConfigField "String", "SDK_VERSION", "\"$libraryVersion\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        androidTest {
            assets {
                srcDirs 'src\\androidTest\\assets'
            }
        }
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'full' // Show full stack traces for exceptions
        showCauses true // Show causes for exceptions
    }
}

def versions = [
        kameleoon  : '4.1.0',
        openfeature: '0.3.0',
        runner     : '1.5.2',
        powermock  : '2.0.9',
        junit      : '5.9.3',
        json       : '20231013',
]

dependencies {
    api("dev.openfeature:android-sdk:${versions.openfeature}")
    api("com.kameleoon:kameleoon-client-android:${versions.kameleoon}")
    api("javax.json:javax.json-api:1.1.4")
    implementation 'com.google.android.material:material:1.8.0'
    testImplementation "org.junit.jupiter:junit-jupiter:${versions.junit}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${versions.junit}"
    testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
    testImplementation "org.json:json:${versions.json}"
    testImplementation 'org.glassfish:javax.json:1.1.4'
    androidTestImplementation "androidx.test:runner:${versions.runner}"
    androidTestImplementation 'org.mockito:mockito-android:3.12.4'
}

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.squareup.okhttp3:okhttp:4.10.0'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    configurations.all {
        resolutionStrategy.force 'org.objenesis:objenesis:2.6'
    }
}

signing {
    sign publishing.publications
}

publishing {
    publications {
        aar(MavenPublication) {

            groupId libraryGroupId
            artifactId libraryArtifactId
            version libraryVersion

            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/" + libraryArtifactId + ".aar")

            pom.with {
                name = 'Kameleoon OpenFeature Android'
                description = 'The OpenFeature provider for Kameleoon android SDK'
                url = 'https://developers.kameleoon.com/android-sdk.html'
                licenses {
                    license {
                        name = 'GPL-3.0'
                        url = 'http://www.gnu.org/licenses/gpl-3.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'Kameleoon'
                        name = 'Kameleoon SDK'
                        email = 'sdk@kameleoon.com'
                    }
                }
                scm {
                    connection = 'scm:svn:https://development.kameleoon.net/sdk/openfeature-android'
                    developerConnection = 'scm:svn:https://development.kameleoon.net/sdk/openfeature-android'
                    url = 'https://development.kameleoon.net/sdk/android-sdk'
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {

        maven {
            name "MavenCentral"
            credentials(PasswordCredentials)
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
        }
    }
}

nexusStaging {
    serverUrl = "https://s01.oss.sonatype.org/service/local/"
    packageGroup = libraryGroupId
}


task printVersionName {
    doLast {
        println android.defaultConfig.versionName
    }
}